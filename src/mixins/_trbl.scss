////
/// @group Mixins
/// @author Joey Hoer
////

// Create a four value trbl list
@function _trbl(
  $values,
  $collapse: false
){

  // Store length for performance
  $len: length($values);

  // Initialize top, right, bottom, left
  $t: nth($values, 1);
  $r: $t;
  $b: $t;
  $l: $t;

  // Set top, right, bottom, left based on input
  @if $len >= 2 {
      $r: nth($values, 2);
      $l: $r;
      @if $len >= 3 {
          $b: nth($values, 3);
          @if $len >= 4 {
              $l: nth($values, 4);
          }
      }
  }

  $return: $t $r $b $l;

  @if $collapse {
    // Join top, right, bottom, left values as succinctly as possible
    $return: $t;
    @if $len == 4 and $r != $l {
      $return: join($return, $r $b $l);
    }
    @elseif $len >= 3 and $t != $b {
        $return: join($return, $r $b);
    }
    @elseif $len >= 2 and $t != $r {
        $return: join($return, $r);
    }
  }

  @return $return;
}

///
/// Prints top, right, bottom, left values for a given property.
///
/// As with other CSS properties, if there is only one component value, it applies
/// to all sides. If there are two values, the top and bottom paddings are set to
/// the first value and the right and left paddings are set to the second. If there
/// are three values, the top is set to the first value, the left and right are set
/// to the second, and the bottom is set to the third. If there are four values,
/// they apply to the top, right, bottom, and left, respectively.
///
/// NOTE: Passing `null` for a value will disable rule creation for the
/// corresponding side(s)
///
/// @access private
///
/// @param {List} $trbl - A list of TRBL (top, right, bottom, left) values.
/// @param {String} $property [''] - The property.
///
@mixin _trbl(
    $trbl,
    $property: ''
){

    // Store length for performance
    // $len: length($trbl);

    // If a list is passed in
    // @if $len == 1 {
    //     $trbl: nth($trbl, 1);
    //     // Reset length to new list
    //     $len: length($trbl);
    // }

    // Expand shorthand arguments
    $defs: append((),(
        n null
    ));
    $trbl: list-walk($trbl, expand-abbr, $defs);

    // Target sides
    $t-prop: top;
    $r-prop: right;
    $b-prop: bottom;
    $l-prop: left;

    // Target corners
    @if in-list($property, ('border-radius')) {
        $t-prop: top-left;
        $r-prop: top-right;
        $b-prop: bottom-right;
        $l-prop: bottom-left;
    }

    $prefix: '';
    $suffix: '';
    @if in-list($property, ('margin', 'padding', 'border')) {
        $prefix: $property + '-';
    }
    @elseif str-index($property, 'border-') == 1 {
        $prefix: str-slice($property, 1, str-index($property, '-'));
        $suffix: str-slice($property, str-index($property, '-'), str-length($property));
    }

    $trbl: _trbl($trbl);
    $t: nth($trbl, 1);
    $r: nth($trbl, 2);
    $b: nth($trbl, 3);
    $l: nth($trbl, 4);

    // Print rule(s)
    @if not(in-list(null, $trbl))
        and $prefix != ''
        and $property != border {

        $value: _trbl($trbl, true);

        // Use shorthand
        #{$property}: $value;
    }
    @else {
        @if $t { #{$prefix}#{$t-prop}#{$suffix}: $t; }
        @if $b { #{$prefix}#{$b-prop}#{$suffix}: $b; }
        @if $l { #{$prefix}#{$l-prop}#{$suffix}: $l; }
        @if $r { #{$prefix}#{$r-prop}#{$suffix}: $r; }
    }
}
