////
/// @group Mixins
/// @author Joey Hoer
////

///
/// Create a visual row that spans the full width of the viewport, while
/// maintaining relative content width.
///
/// NOTE: Ad-infinitumed elements will overflow their parent container.
/// To prevent overflow scrolling, and other issues, the containing element
/// should hide overflow, at least, on the axis matching the overflow. In some
/// cases, overflows hidden with `overflow-x` and `overflow-y` may still be
/// scrolled, so the use of `overflow` is recommended. This may be applied
/// gloabally via the `html` or `body` elements, although that is generally not
/// recomended, as it may cause isses with other page content; it is best to use
/// a wrapper.
///
/// ```
/// .wrapper {
///    overflow-x: hidden;
/// }
/// ```
///
/// @param {String} $push [padding] - The method to be used to push the content
/// NOTE: `border` can be useful when absolutely positioning children.
/// `null` can be useful when content is not constrained to the parent width.
/// @param {String} $pull [margin] - The method to be used to pull the content
/// @param {String} $direction [horizontal] - The direction in which to span ad
///   inifinitum
/// @param {Bool} $content-box [true] - Set `box-sizing: content-box` when
///   set to `true`, only applicable when using `$pull: position`.
///
@mixin ad-infinitum(
  $push: padding,
  $pull: margin,
  $direction: horizontal,
  $content-box: true
) {

  // Expand shorthand arguments
  $defs: (
    h horizontal,
    x horizontal,
    v vertical,
    y vertical,
    t top,
    r right,
    b bottom,
    l left
    );
  $direction: list-walk($direction, expand-abbr, $defs);

  // Set variables
  @if in-list(horizontal, $direction) {
    $direction: join($direction, right left);
  }
  @if in-list(vertical, $direction) {
    $direction: join($direction, top bottom);
  }

  // @todo Consider that some accounts of degraded perfomance
  // have been noted when elements with extremely large boxes are drawn.
  // It may be better to use viewport units, vw/vh depending upon
  // which sides are being set, or possibly, vmin if all sides are
  // set. 50vw should always be sufficent to cover width

  // Set variables
  $t: in-list(top,    $direction);
  $r: in-list(right,  $direction);
  $b: in-list(bottom, $direction);
  $l: in-list(left,   $direction);

  // Push methods
  $y-push: 100vh;
  $x-push: calc((100vw - 100%) / 2);
  @if $push {
    @if $push == padding {
      @include padding(
        if($t, $y-push, null)
        if($r, $x-push, null)
        if($b, $y-push, null)
        if($l, $x-push, null)
        );
    } @else if $push == border {
      @include border(
        if($t, $y-push transparent, null),
        if($r, $x-push transparent, null),
        if($b, $y-push transparent, null),
        if($l, $x-push transparent, null)
        );
    }
  }

  // Pull methods
  $y-pull: -$y-push;
  $x-pull: calc(0% - (100vw - 100%) / 2);
  @if $pull == margin {
    @include margin(
      if($t, $y-pull, null)
      if($r, $x-pull, null)
      if($b, $y-pull, null)
      if($l, $x-pull, null)
      );
  } @else if $pull == position {
    @if $l or $r {
      width: 100%;
    }
    @if $t or $l {
      // When using relative positioning, only one value is ever needed
      // per axis. Because `left == -1 * right`, we can add a positive value
      // to the opposite side rather then using a negative value
      // http://www.w3.org/TR/css3-positioning/#relative-positioning
      @include relative(
        null
        if($l, $x-push, null)
        if($t, $x-push, null)
        null
        );
    }
    @if $content-box {
      box-sizing: content-box;
    }
  }
}
