////
/// @group Mixins
/// @author Joey Hoer
////

///
/// Remove default styling from a list
///
/// @param {Bool} $no-margin [true] - If `true`, top and bottom margins will be
///    removed from the list.
///
@mixin list-unstyled(
    $no-margin: true
){

    list-style-type: none;
    padding-left: 0;

    @if $no-margin {
        @include margin(0 n);
    }

}

///
/// Inline list items
///
/// @param {Bool} $no-margin [true] - If `true`, top and bottom margins will be
///    removed from the list.
///
@mixin list-inline(
    $no-margin: true
){

    @include list-unstyled($no-margin);

    & > li {
        display: inline-block;
    }

}

///
/// Float list items
///
/// @param {String} $dir [left] - The direction to float the list items
/// @param {Bool} $no-margin [true] - If `true`, top and bottom margins will be
///    removed from the list.
///
@mixin list-float(
    $dir: left,
    $no-margin: true
){

    @include list-unstyled($no-margin);
    @include clearfix;

    & > li {
        float: $dir;
    }

}

///
/// Display list items as a single row of table cells
///
/// @param {Bool} $no-margin [true] - If `true`, top and bottom margins will be
///    removed from the list.
///
@mixin list-table(
    $no-margin: true
){

  @include list-unstyled($no-margin);
  @include table($td: "& > li");

}

///
/// Punctuate list items
///
/// @param {String} $divider [', '] - The divider to punctuate the list with
/// @param {String} $display [inline] - The display value to apply to the list items
/// @param {Bool} $no-margin [true] - If `true`, top and bottom margins will be
///    removed from the list.
///
@mixin list-punctuated(
    $divider: ', ',
    $display: inline,
    $no-margin: true
){

    @include list-unstyled($no-margin);

    & > li {
        display: $display;

        &:not(:last-child):after {
            content: $divider;
        }
    }
}

///
/// Divide list items with border
///
/// @param {Bool} $no-margin [true] - If `true`, top and bottom margins will be
///    removed from the list.
/// @content Used to style the divider
///
@mixin list-divided(
    $no-margin: true
){

    @include list-table($no-margin);

    & > li {
        vertical-align: middle;
        @content;

        &:first-child {
            border-left: 0;
        }

        &:last-child {
            border-right: 0;
        }
    }

}

///
/// Create a numbered nested ordered list. For example:
///   1. Thing One
///     1.1. Point One
///     1.2. Point Two
///   2. Thing Two
///     2.1. Point Two
///  NOTE: This should only be used on ordered lists
///
///  @param {Number} $depth - How deep the nesting should go
///  @param {Number} $counter-start [1] - The number at which the nesting
///    should start
///  @param {String} $counter-style [decimal] - The number at which the nesting
///    should start. Must be a valid `list-style-type` as defined by the W3C.
///  @param {String} $counter-seperator ['.'] - The content that will sperate
///    the sections of the counter
///  @param {String} $counter-after [$counter-seperator] - The content to
///    appear after the counter (e.g. the ')' in '1.1)')
///
///  @link http://www.w3.org/TR/CSS21/generate.html#propdef-list-style-type
///
@mixin list-number-nested (
    $depth,
    $counter-start: 1,
    $counter-style: decimal,
    $counter-seperator: '.',
    $counter-after: $counter-seperator
){

    list-style-type: none;

    $content: counter(l0, $counter-style);
    $selector: '';

    @for $i from 0 to $depth {

        & #{$selector} {
            counter-reset: l#{$i} if($i == 0, $counter-start - 1, null);

            li:before {
                content: $content $counter-after;
                counter-increment: l#{$i};
            }
        }

        $selector: $selector + ' ol';
        $content: $content $counter-seperator counter(l#{$i+1}, $counter-style);
    }
}
