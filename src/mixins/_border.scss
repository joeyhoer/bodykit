////
/// @group Mixins
/// @author Joey Hoer
////

///
/// Parse and order width, color, and style values
/// NOTE: Sets default style to `solid`, if necessary.
///
/// @access private
///
/// @param {List} $wcs - The width, color, and style (in any order)
/// @param {List} $defaults [null] - A list of default width, color,
///    and style values to inherit
///
/// @return {List} - The width, color, style
///
@function _parse-wcs(
    $wcs,
    $defaults: null
){

    // We can't do anything with null
    @if $wcs == null { @return $wcs; }

    @if $defaults { $defaults: _parse-wcs($defaults); }
    @else         { $defaults: null null null;  }

    // Parse defaults
    $w: nth($defaults, 1);
    $c: nth($defaults, 2);
    $s: nth($defaults, 3);
    $s: if($s, $s, solid);

    @each $prop in $wcs {

        $prop-type: type-of($prop);

        @if $prop-type == number
            or in-list($prop, (thin, medium, thick)) {

            $w: $prop;

            @if $prop-type != string
                and strip-unit($w) == 0 {
                // Strip unit off zero value
                $w: 0;
            }

        }
        @elseif $prop-type == color
            or $prop == currentColor {
            // currentColor is a color, but it's not a Sass color
            $c: $prop;
        }
        @elseif $prop-type == string {
            // Valid Styles
            // none, hidden, dotted, dashed, solid, double, groove, ridge, inset, outset
            $s: $prop;
        }

    }

    @return $w $c $s;
}

///
/// Set `border`(s)
/// Passing `null` will prevent a rule from a being applied to the corresponding side(s)
///
/// @param {ArgList} $borders - The border(s) to be set
///
@mixin border(
    $borders...
){

    // Store length for performance
    $len: length($borders);

    // Expand shorthand arguments
    $defs: append((),(
        n null
    ));
    $borders: list-walk($borders, expand-abbr, $defs);

    // Initialize defaults
    $defaults: null null null;

    // Defaults are established by the first non-null property
    // TODO: Shouldn't properties inherit from their "TRBL partner"?
    $i: 1;
    @while nth($borders, $i) == null and $i < $len {
        $i: $i + 1;
    }
    $defaults: _parse-wcs(nth($borders, $i));


    // Parse all borders
    $borders: list-walk($borders, _parse-wcs, $defaults);


    // Attempt to use the `border` shorthand
    @if not in-list(null, $borders) {

        // Separate shorthand properties
        $border-wcs: () () ();

        @each $border in $borders {

            @if $border {
                // NOTE: length($border) == 3
                @for $i from 1 through 3 {
                    $border-wcs: replace-nth(
                        $border-wcs,
                        $i,
                        append(nth($border-wcs, $i), nth($border, $i))
                    );
                }
            }

        }

        // Create shorthand property
        $shorthand: ();

        @for $i from 1 through 3 {

            $shorthand-values: nth($border-wcs, $i);

            // If there is only one unique value, it can be added to the
            // `border` shorthand property
            $shorthand: append(
                $shorthand,
                if(length(unique($shorthand-values)) == 1, nth($shorthand-values, 1), null)
            );
        }

        // Print properties
        @if $len == 1
            and nth($shorthand, 1) == 0
            and nth($shorthand, 3) == solid {

            // If `border: 0`, omit `style`
            border: replace-nth($shorthand, 3, null);

        }
        @else {

            // Print `border(-*)` shorthand properties as necessary
            border: $shorthand;
            $shorthand-properties: width color style;
            @for $i from 1 through 3 {
                @if nth($shorthand, $i) == null {
                    @include _trbl(nth($border-wcs, $i), border-#{nth($shorthand-properties, $i)});
                }
            }

        }
    }
    @else {

        // Print `border-[side]` shorthand properties
        @include _trbl($borders, border);

    }

}

///
/// Set `border-color`(s)
/// Passing `null` will prevent a rule from a being applied to the corresponding side(s)
///
/// @param {Number|List} $color - The border color(s) to be set
///
@mixin border-color (
    $color
){
    @include _trbl($color, border-color);
}

///
/// Set `border-style`(s)
/// Passing `null` will prevent a rule from a being applied to the corresponding side(s)
///
/// @param {Number|List} $style - The border style(s) to be set
///
@mixin border-style(
    $style
){
    @include _trbl($style, border-style);
}

///
/// Set `border-width`(s)
/// Passing `null` will prevent a rule from a being applied to the corresponding side(s)
///
/// @param {Number|List} $width - The border width(s) to be set
///
@mixin border-width (
    $width
){
    @include _trbl($width, border-width);
}
