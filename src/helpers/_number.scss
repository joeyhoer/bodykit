////
/// @group Helpers
/// @author Joey Hoer
////

///
/// Takes base to the exponent power, that is, base^exponent.
/// NOTE: This function is defined in Compass, this is a fallback.
///
/// @param {Number} $base - The base number.
/// @param {Number} $exponent - The exponent.
///
/// @return {Number} - The resulting number.
///
@function pow($base, $exponent){
    $res: 1;
    @while($exponent > 0) {
        $res: $res * $base;
        $exponent: $exponent - 1;
    }
    @return $res;
}

///
/// Round a number, keeping a specified number of decimals.
///
/// @param {Number} $num - The number to be rounded.
/// @param {Number} $digits [0] - The number of digits to appear after the decimal point.
///
/// @return {Number} - The rounded number, containing the set number of digits.
///
@function to-fixed(
    $num,
    $digits: 0
){
    $temp: pow(10, $digits);
    @return round($num*$temp)/$temp;
}

///
/// Strip the unit off a number.
///
/// @param {Number} $num - The number to remove units from.
///
/// @return {Number} - The number with unit stripped off.
///
@function strip-unit(
    $num
){
    @return ($num / ($num * 0 + 1));
}

///
/// Convert one unit into another
///
/// @author Hugo Giraudel
///
/// @param {Number} $value - Initial value
/// @param {String} $unit - Desired unit
///
/// @return {Number}
///
/// @throw Error if `$unit` does not exist or if units are incompatible.
///
@function convert-unit(
    $value,
    $unit
){
  $units: (
    'px': 0px,
    'cm': 0cm,
    'mm': 0mm,
    '%': 0%,
    'ch': 0ch,
    'in': 0in,
    'em': 0em,
    'rem': 0rem,
    'pt': 0pt,
    'pc': 0pc,
    'ex': 0ex,
    'vw': 0vw,
    'vh': 0vh,
    'vmin': 0vmin,
    'vmax': 0vmax,
    'deg': 0deg,
    'turn': 0turn,
    'rad': 0rad,
    'grad': 0grad,
    's': 0s,
    'ms': 0ms,
    'Hz': 0Hz,
    'kHz': 0kHz,
  );

  @if map-has-key($units, $unit) {
    @return map-get($units, $unit) + $value;
  }

  @error "Unknown unit `#{$unit}`.";
}
