////
/// @group Selectors
/// @author Joey Hoer
////

///
/// Get a list of input type selectors
/// Will return all input type selectors by default
///
/// @param {List} $exclude [()] - The types to exclude
/// @return {List} - A list of input type selectors
///
@function attribute-selectors(
    $elements,
    $attributes,
    $values: null
){

    $selectors: ();

    @each $element in $elements {
        @each $attribute in $attributes {
            @each $value in $values {
                $value: if(is-true($value), unquote('="#{$value}"'), '');
                $selectors: append($selectors, unquote('#{$element}[#{$attribute}#{$value}]'), comma);
            }
        }
    }

    @return $selectors;

}

///
/// Get a list of text-based input selectors
/// Will return all text-based input selectors by default
///
/// @param {List} $exclude [()] - The types to exclude
/// @return {List} - A list of text-based input selectors
///
@function input-text-types(
    $exclude: null
){
    $types: (
        email,
        number,
        password,
        search,
        tel,
        text,
        url
    );

    // Browser vendors may change the display of these types in the future
    $types: join($types, (
        color,
        date,
        datetime,
        datetime-local,
        month,
        time,
        week
    ));


    @each $type in $exclude {
        $types: remove($types, $type);
    }

    $types: purge($types);

    @return "input:not([type])", attribute-selectors(input, type, $types);
}

///
/// Get a list of button-based input selectors
/// Will return all button-based input selectors by default
///
/// @param {List} $exclude [()] - The types to exclude
/// @return {List} - A list of button-based input selectors
///
@function input-button-types(
    $exclude: null
){
    $types: (
        button,
        reset,
        submit
    );

    @each $type in $exclude {
        $types: remove($types, $type);
    }

    $types: purge($types);

    @return attribute-selectors(input, type, $types);
}
